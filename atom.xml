<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-10T05:10:42.935Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MQ知其然而不知其所然</title>
    <link href="http://yoursite.com/2019/07/02/MQ%E7%9F%A5%E5%85%B6%E7%84%B6%E8%80%8C%E4%B8%8D%E7%9F%A5%E5%85%B6%E6%89%80%E7%84%B6/"/>
    <id>http://yoursite.com/2019/07/02/MQ知其然而不知其所然/</id>
    <published>2019-07-02T02:13:52.000Z</published>
    <updated>2019-07-10T05:10:42.935Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MQ知其然而不知其所然"><a href="#MQ知其然而不知其所然" class="headerlink" title="MQ知其然而不知其所然"></a>MQ知其然而不知其所然</h1><h2 id="1-什么是MQ？"><a href="#1-什么是MQ？" class="headerlink" title="1.什么是MQ？"></a>1.什么是MQ？</h2><p>MQ：通俗的理解为消息队列。在分布式系统中，一个系统可以将一份数据存放在一个中间件上，然后其他系统需要这份数据的话，就可以从中间件上将这份数据取出。</p><p><strong>那么问题来了，为什么需要使用MQ？</strong></p><p>可以使用MQ做到系统的解耦、异步、削峰。</p><h2 id="2-MQ的优点"><a href="#2-MQ的优点" class="headerlink" title="2.MQ的优点"></a>2.MQ的优点</h2><h3 id="2-1-解耦"><a href="#2-1-解耦" class="headerlink" title="2.1.解耦"></a>2.1.解耦</h3><p><strong>业务：</strong>A系统需要发送数据到BCD系统中，在BCD系统中进行操作</p><h4 id="2-1-1-在不使用MQ下的系统耦合"><a href="#2-1-1-在不使用MQ下的系统耦合" class="headerlink" title="2.1.1.在不使用MQ下的系统耦合"></a>2.1.1.在不使用MQ下的系统耦合</h4><p><img src="/2019/07/02/MQ知其然而不知其所然/22.png" alt></p><p>坏处：</p><p>1.从图中可以知道，当A系统需要完成一个操作，需要BCD协同完成。当整个工程新增系统或者有系统不需要A传递的数据的话，那么就需要修改两方的数据。</p><p>2.因为A系统需要完成一个操作，需要依赖于BCD系统，那么如果其中一个出现了问题，那么整个系统就会出现异常。</p><p>3.如果A系统所依赖的系统访问超时该如何处理。</p><p>所以在这种模式容易出现许多问题，如何解决这些问题呢？</p><h4 id="2-1-2-系统使用MQ解耦"><a href="#2-1-2-系统使用MQ解耦" class="headerlink" title="2.1.2.系统使用MQ解耦"></a>2.1.2.系统使用MQ解耦</h4><p><img src="/2019/07/02/MQ知其然而不知其所然/23.png" alt></p><p>在使用了MQ情况下，A系统可以将需要传递数据发送到MQ中，这时候，A所依赖的系统（BCD）就可以从MQ中获取数据完成操作。这样的话就不需要考虑上面所提及的坏处。</p><h3 id="2-2-异步"><a href="#2-2-异步" class="headerlink" title="2.2.异步"></a>2.2.异步</h3><h4 id="2-2-1-在不使用MQ下系统是保持同步状态"><a href="#2-2-1-在不使用MQ下系统是保持同步状态" class="headerlink" title="2.2.1.在不使用MQ下系统是保持同步状态"></a>2.2.1.在不使用MQ下系统是保持同步状态</h4><p>如果系统采用是的同步设计，那么会给系统造成高延迟的现象</p><p><img src="/2019/07/02/MQ知其然而不知其所然/24.png" alt></p><p>由图中可以得到如果需要完成一个功能总共耗时为200 ms</p><h4 id="2-2-2-在使用MQ下系统可以修改为异步状态"><a href="#2-2-2-在使用MQ下系统可以修改为异步状态" class="headerlink" title="2.2.2.在使用MQ下系统可以修改为异步状态"></a>2.2.2.在使用MQ下系统可以修改为异步状态</h4><p>如果将系统修改为异步状态，那么系统就可以大大减少系统延迟现象。</p><p><img src="/2019/07/02/MQ知其然而不知其所然/25.png" alt></p><p>在使用了MQ的情况下，完成一个功能返回给用户的时间差只存在 50 ms + 5 ms = 55 ms。这样从同步系统到异步系统的时间比值为 40：11 接近省去了4倍的时间（在假设的情况下）。</p><blockquote><p>在互联网企业上一个请求的响应时间应该在200 ms之内，这样用户就很难感知。</p></blockquote><h3 id="2-3-削峰"><a href="#2-3-削峰" class="headerlink" title="2.3.削峰"></a>2.3.削峰</h3><h4 id="2-3-1-没有削峰的系统"><a href="#2-3-1-没有削峰的系统" class="headerlink" title="2.3.1.没有削峰的系统"></a>2.3.1.没有削峰的系统</h4><p><img src="/2019/07/02/MQ知其然而不知其所然/26.png" alt></p><h4 id="2-3-2-使用了MQ对系统进行削峰"><a href="#2-3-2-使用了MQ对系统进行削峰" class="headerlink" title="2.3.2.使用了MQ对系统进行削峰"></a>2.3.2.使用了MQ对系统进行削峰</h4><p><img src="/2019/07/02/MQ知其然而不知其所然/27.png" alt></p><h2 id="3-引入MQ出现的问题？"><a href="#3-引入MQ出现的问题？" class="headerlink" title="3.引入MQ出现的问题？"></a>3.引入MQ出现的问题？</h2><p><img src="/2019/07/02/MQ知其然而不知其所然/29.png" alt></p><p>虽然系统中引入了MQ组件，做到了系统的异步、削峰、解耦，但是因为系统中加入了MQ导致了系统出现了下面几种问题。</p><h3 id="3-1-系统的可用性降低"><a href="#3-1-系统的可用性降低" class="headerlink" title="3.1.系统的可用性降低"></a>3.1.系统的可用性降低</h3><p>引入了MQ，系统的消息转递需要依赖于MQ，但是当MQ宕机的话那么整个系统也会随之宕机。</p><h3 id="3-2-系统的复杂度提高"><a href="#3-2-系统的复杂度提高" class="headerlink" title="3.2.系统的复杂度提高"></a>3.2.系统的复杂度提高</h3><p>引入了MQ会导致系统的架构变得复杂。同时也需要考虑会出现的问题。</p><p>1）是否会往MQ中重复发送消息？</p><p>2）发送给MQ的消息是否会丢失？</p><p>3）发送给MQ的消息如果具有顺序，如何保证消息的顺序？</p><h3 id="3-3-系统一致性问题"><a href="#3-3-系统一致性问题" class="headerlink" title="3.3.系统一致性问题"></a>3.3.系统一致性问题</h3><p>当系统A发送消息给BCD的话，ABC都执行完并且无异常，但是D出现异常。那么A会告知用户执行完毕，这种情况该如何解决。</p><h2 id="如果做MQ的选型？"><a href="#如果做MQ的选型？" class="headerlink" title="如果做MQ的选型？"></a>如果做MQ的选型？</h2><p>1.社区活跃度</p><p>2.单机吞吐量</p><p>3.时效性</p><p>一般在中小型公司采用RabbitMQ（消息处理能力万级，但是语言采用的是erlang专门处理分布式的语言设计所有处理速度快），中大型公司有专门技术人员可以采用RockerMQ（消息处理能力十万级）。大数据采用kafka（消息处理能力十万级）。</p><p>一般现在不采用ActiveMQ（消息处理能力万级）作为MQ，因为社区活跃度开始下降。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MQ知其然而不知其所然&quot;&gt;&lt;a href=&quot;#MQ知其然而不知其所然&quot; class=&quot;headerlink&quot; title=&quot;MQ知其然而不知其所然&quot;&gt;&lt;/a&gt;MQ知其然而不知其所然&lt;/h1&gt;&lt;h2 id=&quot;1-什么是MQ？&quot;&gt;&lt;a href=&quot;#1-什么是MQ？&quot;
      
    
    </summary>
    
      <category term="MQ" scheme="http://yoursite.com/categories/MQ/"/>
    
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息中间件</title>
    <link href="http://yoursite.com/2019/07/02/RabbitMQ%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/07/02/RabbitMQ消息中间件/</id>
    <published>2019-07-02T02:13:52.000Z</published>
    <updated>2019-07-10T05:13:46.284Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RabbitMQ消息中间件"><a href="#RabbitMQ消息中间件" class="headerlink" title="RabbitMQ消息中间件"></a>RabbitMQ消息中间件</h1><h2 id="1-RabbitMQ简介"><a href="#1-RabbitMQ简介" class="headerlink" title="1.RabbitMQ简介"></a>1.RabbitMQ简介</h2><h3 id="1-1-消息队列简介"><a href="#1-1-消息队列简介" class="headerlink" title="1.1.消息队列简介"></a>1.1.消息队列简介</h3><p>消息中间件是分布式系统中的重要组件，主要解决了应用耦合，异步消息，流量削锋等问题，实现系统高性能，高可用，可伸缩性喝最终一致性【架构】使用较多的消息队列有ActiveMQ，RabbitMQ，ZeroMQ，Kafka,MetaMQ,RocketMQ</p><h3 id="1-2-什么是RabbitMQ"><a href="#1-2-什么是RabbitMQ" class="headerlink" title="1.2.什么是RabbitMQ"></a>1.2.什么是RabbitMQ</h3><p>RabbitMQ 是一个由 Erlang 语言开发的 AMQP 的开源实现。<br>AMQP ：Advanced Message Queue Protocol，高级消息队列协议。它是应用层协议的一个开放 标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，<strong>并不受产品、开发语言等条件的限制。</strong><br>RabbitMQ 初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：</p><p>1.可靠性（Reliability）<br>RabbitMQ 使用一些机制来保证可靠性，如持久化（当服务器挂掉的时候会不会丢失信息，而是会保存信息到硬盘）、传输确认、发布确认。</p><p>2.灵活的路由（Flexible Routing）<br>在消息进入队列之前，通过 Exchange 来路由消息的。对于典型的路由功能，RabbitMQ 已经提供了一些内置的 Exchange 来实现。针对更复杂的路由功能，可以将多个 Exchange 绑定在一起，也通过插件机制实现自己的 Exchange 。</p><p>3.消息集群（Clustering）<br>多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</p><p> 4.高可用（Highly Available Queues）<br>队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</p><p>5.多种协议（Multi-protocol）<br>RabbitMQ 支持多种消息队列协议，比如 STOMP、MQTT 等等。</p><p>6.多语言客户端（Many Clients） RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等等。</p><p>7.管理界面（Management UI）<br>RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方 面。</p><p>8.跟踪机制（Tracing）<br>如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。</p><p> 9.插件机制（Plugin System）<br>RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。 </p><h3 id="1-3-架构图与主要概念"><a href="#1-3-架构图与主要概念" class="headerlink" title="1.3.架构图与主要概念"></a>1.3.架构图与主要概念</h3><h4 id="1-3-1-架构图"><a href="#1-3-1-架构图" class="headerlink" title="1.3.1.架构图"></a>1.3.1.架构图</h4><p><img src="/2019/07/02/RabbitMQ消息中间件/11.png" alt></p><h4 id="1-2-2-主要概念"><a href="#1-2-2-主要概念" class="headerlink" title="1.2.2.主要概念"></a>1.2.2.主要概念</h4><p>RabbitMQ Server： 也叫broker server，它是一种传输服务。 他的角色就是维护一条 从Producer到Consumer的路线，保证数据能够按照指定的方式进行传输。</p><p>Producer： 消息生产者，如图A、B、C，数据的发送方。消息生产者连接RabbitMQ服 务器然后将消息投递到Exchange。</p><p>Consumer：消息消费者，如图1、2、3，数据的接收方。消息消费者订阅队列， RabbitMQ将Queue中的消息发送到消息消费者。 Exchange：生产者将消息发送到Exchange（交换器），由Exchange将消息路由到一个 或多个Queue中（或者丢弃）。</p><p>Exchange并不存储消息。RabbitMQ中的Exchange有 direct、fanout、topic、headers四种类型，每种类型对应不同的路由规则。</p><p>Queue：（队列）是RabbitMQ的内部对象，用于存储消息。消息消费者就是通过订阅队列来获取消息的，RabbitMQ中的消息都只能存储在Queue中，生产者生产消息并终投递到Queue中，消费者可以从Queue中获取消息并消费。多个消费者可以订阅同一个 Queue，这时Queue中的消息会被平均分摊给多个消费者进行处理，而不是每个消费者 都收到所有的消息并处理。</p><p>RoutingKey：生产者在将消息发送给Exchange的时候，一般会指定一个routing key， 来指定这个消息的路由规则，而这个routing key需要与Exchange Type及binding key联 合使用才能终生效。在Exchange Type与binding key固定的情况下（在正常使用时一 般这些内容都是固定配置好的），我们的生产者就可以在发送消息给Exchange时，通过 指定routing key来决定消息流向哪里。RabbitMQ为routing key设定的长度限制为255 bytes。</p><p>Connection： （连接）：Producer和Consumer都是通过TCP连接到RabbitMQ Server 的。以后我们可以看到，程序的起始处就是建立这个TCP连接。</p><p>Channels： （信道）：它建立在上述的TCP连接中。数据流动都是在Channel中进行 的。也就是说，一般情况是程序起始建立TCP连接，第二步就是建立这个Channel。</p><p>VirtualHost：权限控制的基本单位，一个VirtualHost里面有若干Exchange和 MessageQueue，以及指定被哪些user使用 </p><h2 id="2-走进RabbitMQ"><a href="#2-走进RabbitMQ" class="headerlink" title="2.走进RabbitMQ"></a>2.走进RabbitMQ</h2><h3 id="2-1-RabbitMQ安装"><a href="#2-1-RabbitMQ安装" class="headerlink" title="2.1.RabbitMQ安装"></a>2.1.RabbitMQ安装</h3><p>（1）下载并安装 Eralng<br>配套软件中已提供otp_win64_20.2.exe   （以管理员身份运行安装） （2）下载并安装rabbitmq<br>配套软件中已提供rabbitmq-server-3.7.4.exe。双击安装，注意不要安装在包含中文和 空格的目录下！安装后window服务中就存在rabbitMQ了，并且是启动状态。</p><p>（3）安装管理界面（插件）<br>进入rabbitMQ安装目录的sbin目录，输入命令<br>rabbitmq‐plugins enable rabbitmq_management</p><p>（4）重新启动服务</p><p>（5）打开浏览器，地址栏输入<a href="http://127.0.0.1:15672" target="_blank" rel="noopener">http://127.0.0.1:15672</a>  ,即可看到管理界面的登陆页</p><p>输入用户名和密码，都为guest  进入主界面：</p><p>上侧的导航以此是：概览、连接、信道、交换器、队列、用户管理</p><h3 id="2-2-Docker环境下安装"><a href="#2-2-Docker环境下安装" class="headerlink" title="2.2.Docker环境下安装"></a>2.2.Docker环境下安装</h3><p><strong>1.下载镜像</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:management</span><br></pre></td></tr></table></figure><p><strong>2.创建RabbitMQ容器</strong></p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span> -di --name=tensqura_rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>15672 (if management plugin is enabled)</p><p>15671  management监听端口</p><p>5672, 5671 (AMQP 0-9-1 without and with TLS)</p><p> 4369 (epmd)   epmd  代表 Erlang 端口映射守护进程 </p><p>25672 (Erlang distribution)</p><p><strong>3.登入RabbitMQ管理界面</strong></p><p>访问地址：<a href="http://192.168.186.129:15672/" target="_blank" rel="noopener">http://192.168.186.129:15672</a></p><p>账号密码均为guest</p><h3 id="2-3-直接模式-Direct"><a href="#2-3-直接模式-Direct" class="headerlink" title="2.3.直接模式(Direct)"></a>2.3.直接模式(Direct)</h3><h4 id="2-3-1-什么是直接模式"><a href="#2-3-1-什么是直接模式" class="headerlink" title="2.3.1.什么是直接模式"></a>2.3.1.什么是直接模式</h4><p>将消息发给唯一一个节点时使用这种模式，这是简单的一种形式。</p><p><img src="/2019/07/02/RabbitMQ消息中间件/12.png" alt></p><p>任何发送到Direct Exchange的消息都会被转发到RouteKey中指定的Queue。<br>1.一般情况可以使用rabbitMQ自带的Exchange：””(该Exchange的名字为空字符串，下文称其为default Exchange)。</p><p>2.这种模式下不需要将Exchange进行任何绑定(binding)操作 3.消息传递时需要一个“RouteKey”，可以简单的理解为要发送到的队列名字。</p><p>4.如果vhost中不存在RouteKey中指定的队列名，则该消息会被<strong>抛弃</strong>。 </p><h4 id="2-3-2创建队列"><a href="#2-3-2创建队列" class="headerlink" title="2.3.2创建队列"></a>2.3.2创建队列</h4><p>Name:队列的名称</p><p>Durability:是否持久化</p><p>Auto Delete:是否自动删除</p><p><img src="/2019/07/02/RabbitMQ消息中间件/13.png" alt></p><h4 id="2-3-3-代码实现-消息生产者"><a href="#2-3-3-代码实现-消息生产者" class="headerlink" title="2.3.3.代码实现- 消息生产者"></a>2.3.3.代码实现- 消息生产者</h4><p><strong>1.引入依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span>          </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span>     </span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- rabbitMQ起步依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span>              </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>2.配置文件信息</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span>   </span><br><span class="line"><span class="attr">rabbitmq:</span>     </span><br><span class="line"><span class="attr">host:</span> <span class="number">192.168</span><span class="number">.192</span><span class="number">.129</span></span><br></pre></td></tr></table></figure><p><strong>3.编写启动类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span></span><br><span class="line"><span class="class"></span>&#123;     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;         </span><br><span class="line">        SpringApplication.run(Application.class);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4.编写测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class) </span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes=Application.class) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSend</span><span class="params">()</span></span>&#123;</span><br><span class="line">        rabbitTemplate.convertAndSend(<span class="string">"队列名称"</span>,<span class="string">"我要红包"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-代码实现-消息消费者"><a href="#2-3-4-代码实现-消息消费者" class="headerlink" title="2.3.4.代码实现-消息消费者"></a>2.3.4.代码实现-消息消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@RabbitListener</span>(queues=<span class="string">"itcast"</span> ) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer1</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span>     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(String message)</span></span>&#123; </span><br><span class="line">        System.out.println(<span class="string">"itcast接收到消息："</span>+message);     </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-分裂模式（Fanout）"><a href="#2-4-分裂模式（Fanout）" class="headerlink" title="2.4.分裂模式（Fanout）"></a>2.4.分裂模式（Fanout）</h3><h4 id="2-4-1-什么是分裂模式（Fanout）"><a href="#2-4-1-什么是分裂模式（Fanout）" class="headerlink" title="2.4.1.什么是分裂模式（Fanout）"></a>2.4.1.什么是分裂模式（Fanout）</h4><p>消息传递个多个队列的时候就可以采用这种模式</p><p><img src="/2019/07/02/RabbitMQ消息中间件/14.png" alt></p><p>任何发送到Exchange的消息都会转发到绑定到该Exchange的队列中。</p><p>1.可以理解为路由表的模式</p><p>2.这种模式不需要RouteKey</p><p> 3.这种模式需要提前将Exchange与Queue进行绑定，一个Exchange可以绑定多个 Queue，一个Queue可以同多个Exchange进行绑定。（多对多的关系）</p><p>4.如果接受到消息的Exchange没有与任何Queue绑定，则消息会被<strong>抛弃</strong>。 </p><h4 id="2-4-2-交换器绑定队列"><a href="#2-4-2-交换器绑定队列" class="headerlink" title="2.4.2.交换器绑定队列"></a>2.4.2.交换器绑定队列</h4><p><strong>1.创建交换器，类型选择为fanout</strong></p><p><img src="/2019/07/02/RabbitMQ消息中间件/15.png" alt></p><p><strong>2.创建队列</strong></p><p><img src="/2019/07/02/RabbitMQ消息中间件/16.png" alt></p><p><strong>3.交换器绑定队列</strong></p><p>选择对应的交换器，点击进去</p><p><img src="/2019/07/02/RabbitMQ消息中间件/17.png" alt></p><p>填写需要绑定的队列名称</p><p><img src="/2019/07/02/RabbitMQ消息中间件/18.png" alt></p><h4 id="2-4-3-代码实现-消息生产者"><a href="#2-4-3-代码实现-消息生产者" class="headerlink" title="2.4.3.代码实现-消息生产者"></a>2.4.3.代码实现-消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendFanout</span><span class="params">()</span></span>&#123;</span><br><span class="line">    rabbitTemplate.convertAndSend(<span class="string">"chuanzhi"</span>,<span class="string">""</span>, <span class="string">"分列模式走起"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-4-代码实现-消息消费者"><a href="#2-4-4-代码实现-消息消费者" class="headerlink" title="2.4.4.代码实现-消息消费者"></a>2.4.4.代码实现-消息消费者</h4><p>创建一个类去监听对应的队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@RabbitListener</span>(queues=<span class="string">"需要监听的队列名称"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"itheima接收到消息："</span>+message);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-主题模式（Topic）"><a href="#2-5-主题模式（Topic）" class="headerlink" title="2.5.主题模式（Topic）"></a>2.5.主题模式（Topic）</h3><h4 id="2-5-1-什么是主题模式"><a href="#2-5-1-什么是主题模式" class="headerlink" title="2.5.1.什么是主题模式"></a>2.5.1.什么是主题模式</h4><p>任何发送到Topic Exchange的消息都会被转发到所有关心RouteKey中指定话题的Queue 上。可以说是分裂模式一种加强。</p><p><img src="/2019/07/02/RabbitMQ消息中间件/19.png" alt></p><p>在这个模式中出现了匹配规则</p><p>routing key：就是一个匹配队列的规则，可以给每个Exchange绑定的队列设置routing key ,当一个消息经过Exchange的时候，如果使用的是主题模式，会匹配routing key，然后分发到对象的队列中。</p><p>规则：</p><p><strong>.*</strong> 表示匹配一个点后面任意字符  </p><p><strong>.#</strong> 表示匹配一个点后面任意字符（但是这种允许后面有多个 .  例如 abc.ac.exc  能匹配 abc.#   但是不能匹配 abc.*）</p><p>这种模式与前面两种模式差不多，当经过Exchange和routing key的时候，没有可以转发的队列，那么就会丢弃这条消息。</p><h4 id="2-5-2-创建队列与绑定"><a href="#2-5-2-创建队列与绑定" class="headerlink" title="2.5.2.创建队列与绑定"></a>2.5.2.创建队列与绑定</h4><p><strong>1.创建队列，类型选择为topic</strong></p><p><img src="/2019/07/02/RabbitMQ消息中间件/20.png" alt></p><p><strong>2.创建队列</strong></p><p><img src="/2019/07/02/RabbitMQ消息中间件/16.png" alt></p><p><strong>3.绑定队列，并且设置routing key</strong></p><p><img src="/2019/07/02/RabbitMQ消息中间件/21.png" alt></p><h4 id="2-5-3-代码实现-消息生产者"><a href="#2-5-3-代码实现-消息生产者" class="headerlink" title="2.5.3.代码实现-消息生产者"></a>2.5.3.代码实现-消息生产者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span>     </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSendTopic1</span><span class="params">()</span></span>&#123;         rabbitTemplate.convertAndSend(<span class="string">"topictest"</span>,<span class="string">"goods.aaa"</span>,<span class="string">"主题模式"</span>);     &#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-4-代码实现-消息消费者"><a href="#2-5-4-代码实现-消息消费者" class="headerlink" title="2.5.4.代码实现-消息消费者"></a>2.5.4.代码实现-消息消费者</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span> </span><br><span class="line"><span class="meta">@RabbitListener</span>(queues=<span class="string">"需要监听的队列名称"</span> )</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer2</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showMessage</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"itheima接收到消息："</span>+message);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RabbitMQ消息中间件&quot;&gt;&lt;a href=&quot;#RabbitMQ消息中间件&quot; class=&quot;headerlink&quot; title=&quot;RabbitMQ消息中间件&quot;&gt;&lt;/a&gt;RabbitMQ消息中间件&lt;/h1&gt;&lt;h2 id=&quot;1-RabbitMQ简介&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="MQ" scheme="http://yoursite.com/categories/MQ/"/>
    
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Active消息中间件</title>
    <link href="http://yoursite.com/2019/07/02/Active%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <id>http://yoursite.com/2019/07/02/Active消息中间件/</id>
    <published>2019-07-02T02:13:52.000Z</published>
    <updated>2019-07-10T05:08:29.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="消息中间件"><a href="#消息中间件" class="headerlink" title="消息中间件"></a>消息中间件</h1><p>当没有采用消息中间件的系统模块图,当运营商后台去调用搜索服务和页面生成服务的时候，不需要知道他们返回的结果，所以在这里为了提高效率、降低系统耦合度可以采用消息中间件的解决方案。</p><p><img src="/2019/07/02/Active消息中间件/01.png" alt="01"></p><p>当采用了消息中间件之后的系统模块图，中间去除了dubbo和减少了对搜索服务和页面生成服务的依赖，降低了系统耦合度</p><p><img src="/2019/07/02/Active消息中间件/02.png" alt></p><h2 id="1-什么是消息中间件"><a href="#1-什么是消息中间件" class="headerlink" title="1.什么是消息中间件"></a>1.什么是消息中间件</h2><p>消息中间件利用高效可靠的消息传递机制进行平台无关的数据交流，并基于数据通信来进行分布式系统的集成。通过提供消息传递和消息排队模型，它可以在<strong><em>分布式环境</em></strong>下扩展进程间的通信。对于消息中间件，常见的角色大致也就有Producer（生产者）、Consumer（消费者）</p><p>1.1常见的消息中间件产品</p><p>JMS:JAVA MESSAGE SERVICE</p><p>（1）ActiveMQ</p><p>ActiveMQ 是Apache出品，最流行的，能力强劲的开源消息总线。ActiveMQ 是一个完全支持JMS1.1和J2EE 1.4规范的 JMS Provider实现。</p><p>（2）RabbitMQ</p><p>AMQP协议的领导实现，支持多种场景。淘宝的MySQL集群内部有使用它进行通讯，OpenStack开源云平台的通信组件，最先在金融行业得到运用。</p><p>（3）ZeroMQ</p><p>史上最快的消息队列系统</p><p>（4）Kafka</p><p>Apache下的一个子项目 。特点：高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统。适合处理海量数据。</p><h3 id="1-1-什么是JMS"><a href="#1-1-什么是JMS" class="headerlink" title="1.1.什么是JMS"></a>1.1.什么是JMS</h3><p>JMS（<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener"><strong>Java</strong> </a>Messaging Service）是Java平台上有关面向消息中间件的技术规范，它便于消息系统中的Java应用程序进行消息交换,并且通过提供标准的产生、发送、接收消息的接口简化企业应用的开发。</p><p>​       JMS本身只定义了一系列的接口规范，是一种与厂商无关的 API，用来访问消息收发系统。它类似于 JDBC(<a href="http://lib.csdn.net/base/java" target="_blank" rel="noopener"><strong>java</strong> </a>Database Connectivity)：这里，JDBC 是可以用来访问许多不同关系<a href="http://lib.csdn.net/base/mysql" target="_blank" rel="noopener"><strong>数据库</strong></a>的 API，而 JMS 则提供同样与厂商无关的访问方法，以访问消息收发服务。许多厂商目前都支持 JMS，包括 IBM 的 MQSeries、BEA的 Weblogic JMS service和 Progress 的 SonicMQ，这只是几个例子。 JMS 使您能够通过消息收发服务（有时称为消息中介程序或路由器）从一个 JMS 客户机向另一个 JML 客户机发送消息。消息是 JMS 中的一种类型对象，由两部分组成：报头和消息主体。报头由路由信息以及有关该消息的元数据组成。消息主体则携带着应用程序的数据或有效负载。</p><p>JMS 定义了五种不同的消息正文格式，以及调用的消息类型，允许你发送并接收以一</p><p>些不同形式的数据，提供现有消息格式的一些级别的兼容性。</p><p>· TextMessage–一个字符串对象</p><p>· MapMessage–一套名称-值对</p><p>· ObjectMessage–一个序列化的 Java 对象</p><p>· BytesMessage–一个字节的数据流</p><p>· StreamMessage – Java 原始值的数据流</p><h3 id="1-2-JMS消息传递"><a href="#1-2-JMS消息传递" class="headerlink" title="1.2.JMS消息传递"></a>1.2.JMS消息传递</h3><p>在消息传递存在两种类型：</p><h4 id="1-2-1-点对点"><a href="#1-2-1-点对点" class="headerlink" title="1.2.1.点对点"></a>1.2.1.点对点</h4><p>一个生产者会对应一个消费者，一个生成者发布的消息会存放在队列中，然后消费者不一定需要及时将队列的数据取出，而是可以不定时的去获取数据。当数据被取出的时候队列中的消息就会减少一条。</p><p>当存在多个消费者监听的队列是同一个的时候，谁先监听消息队列谁就先获取到数据。</p><p><img src="/2019/07/02/Active消息中间件/03.png" alt></p><h4 id="1-2-2-发布-订阅"><a href="#1-2-2-发布-订阅" class="headerlink" title="1.2.2.发布/订阅"></a>1.2.2.发布/订阅</h4><p>一个生产者会对应多个消费者，当一个生产者发布了一条信息，会将数据存放在topic中，然后即时发生给每个在线的消费者，类似与广播的特性。</p><p>当有一个消费者没有上线的时候，会接受不到广播。</p><p><img src="/2019/07/02/Active消息中间件/04.png" alt></p><h2 id="2-ActiveMQ安装（Linux）"><a href="#2-ActiveMQ安装（Linux）" class="headerlink" title="2.ActiveMQ安装（Linux）"></a>2.ActiveMQ安装（Linux）</h2><p>（1）将apache-activemq-5.12.0-bin.tar.gz 上传至服务器</p><p>（2）解压此文件</p><p>   tar  zxvf    apache-activemq-5.12.0-bin.tar.gz   </p><p>（3）为apache-activemq-5.12.0目录赋权</p><p> <code>chmod 777 apache-activemq-5.12.0</code></p><p>（4）进入apache-activemq-5.12.0\bin目录</p><p>（5）赋与执行权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   chmod <span class="number">755</span> activemq    </span><br><span class="line">--------------------------  **知识点小贴士**------------------------   </span><br><span class="line">linux 命令chmod <span class="number">755</span>的意思   </span><br><span class="line">chmod是 Linux 下设置文件权限的命令，后面的数字表示不同用户或用户组的权限。   </span><br><span class="line">一般是三个数字：    </span><br><span class="line">第一个数字表示文件所有者的权限    </span><br><span class="line">第二个数字表示与文件所有者同属一个用户组的其他用户的权限    </span><br><span class="line">第三个数字表示其它用户组的权限。         </span><br><span class="line">权限分为三种：读（r=<span class="number">4</span>），写（w=<span class="number">2</span>），执行（x=<span class="number">1</span>） 。 </span><br><span class="line">综合起来还有可读可执行（rx=<span class="number">5</span>=<span class="number">4</span>+<span class="number">1</span>）、</span><br><span class="line">可读可写（rw=<span class="number">6</span>=<span class="number">4</span>+<span class="number">2</span>）、</span><br><span class="line">可读可写可执行(rwx=<span class="number">7</span>=<span class="number">4</span>+<span class="number">2</span>+<span class="number">1</span>)。         </span><br><span class="line">所以，chmod <span class="number">755</span> 设置用户的权限为：    </span><br><span class="line"><span class="number">1</span>.文件所有者可读可写可执行       --<span class="number">7</span>   </span><br><span class="line"><span class="number">2</span>.与文件所有者同属一个用户组的其他用户可读可执行 --<span class="number">5</span>     </span><br><span class="line"><span class="number">3</span>.其它用户组可读可执行                                            --<span class="number">5</span></span><br></pre></td></tr></table></figure><h3 id="1-3-3启动"><a href="#1-3-3启动" class="headerlink" title="1.3.3启动"></a>1.3.3启动</h3><p>​    ./activemq start   </p><p>出现下列提示表示成功！</p><p><img src="/2019/07/02/Active消息中间件/05.png" alt></p><p>假设服务器地址为192.168.25.135 ，打开浏览器输入地址</p><p><a href="http://192.168.25.129:8161/" target="_blank" rel="noopener">http://192.168.25.135:8161/</a> 即可进入ActiveMQ管理页面</p><p><img src="/2019/07/02/Active消息中间件/06.png" alt></p><p>点击进入管理页面</p><p><img src="/2019/07/02/Active消息中间件/07.png" alt></p><p>输入用户名和密码  均为 admin </p><p><img src="/2019/07/02/Active消息中间件/08.png" alt></p><p>进入主界面</p><p><img src="/2019/07/02/Active消息中间件/09.png" alt></p><p>点对点消息列表：</p><p><img src="/2019/07/02/Active消息中间件/10.png" alt></p><p>列表各列信息含义如下：</p><p><strong>Number Of Pending Messages</strong>  <strong>：</strong>等待消费的消息 这个是当前未出队列的数量。</p><p><strong>Number Of Consumers</strong>  <strong>：</strong>消费者 这个是消费者端的消费者数量</p><p><strong>Messages Enqueued</strong>  <strong>：</strong>进入队列的消息  进入队列的总数量,包括出队列的。</p><p><strong>Messages Dequeued</strong>  <strong>：</strong>出了队列的消息  可以理解为是消费这消费掉的数量。</p><h2 id="3-JMS入门小Demo"><a href="#3-JMS入门小Demo" class="headerlink" title="3.JMS入门小Demo"></a>3.JMS入门小Demo</h2><h3 id="3-1点对点Demo"><a href="#3-1点对点Demo" class="headerlink" title="3.1点对点Demo"></a>3.1点对点Demo</h3><p>点对点的模式主要建立在一个队列上面，当连接一个列队的时候，发送端不需要知道接收端是否正在接收，可以直接向ActiveMQ发送消息，发送的消息，将会先进入队列中，如果有接收端在监听，则会发向接收端，如果没有接收端接收，则会保存在ActiveMQ服务器，直到接收端接收消息，点对点的消息模式可以有多个发送端，多个接收端，但是一条消息，只会被一个接收端给接收到，哪个接收端先连上ActiveMQ，则会先接收到，而后来的接收端则接收不到那条消息。</p><h4 id="3-1-1添加依赖"><a href="#3-1-1添加依赖" class="headerlink" title="3.1.1添加依赖"></a>3.1.1添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2生产者代码"><a href="#3-1-2生产者代码" class="headerlink" title="3.1.2生产者代码"></a>3.1.2生产者代码</h4><p>注意：</p><p>1)在地址中传输协议为tcp</p><p>2）在第四步骤中的参数说明</p><p>第一个参数：是否开启事务</p><p>第二个参数消息的确定模式</p><ul><li>AUTO_ACKNOWLEDGE = 1    自动确认</li><li>CLIENT_ACKNOWLEDGE = 2    客户端手动确认   </li><li>DUPS_OK_ACKNOWLEDGE = 3    自动批量确认</li><li>SESSION_TRANSACTED = 0    事务提交并确认</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line"><span class="comment">//说明：使用想对应的是厂商的连接工厂</span></span><br><span class="line">ConnectionFactory  connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://120.76.56.183:61616"</span>);</span><br><span class="line"><span class="comment">//2.创建连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line"><span class="comment">//参数说明：1.是否启用事务2.消息确认模式</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.创建消息队列 </span></span><br><span class="line"><span class="comment">//参数说明：队列的名称</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">//6.创建生产者  参数说明：生产者使用那个消息对象</span></span><br><span class="line">MessageProducer producer = session.createProducer(queue);</span><br><span class="line"><span class="comment">//7.创建消息</span></span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"你真是个大傻吊"</span>);</span><br><span class="line"><span class="comment">//8.发生消息</span></span><br><span class="line">producer.send(message);</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-3消费者代码"><a href="#3-1-3消费者代码" class="headerlink" title="3.1.3消费者代码"></a>3.1.3消费者代码</h4><p>注意：需要创建匿名内部类 Message Listener</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://120.76.56.183:61616"</span>);</span><br><span class="line"><span class="comment">//2.创建连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.监听对应的消息队列</span></span><br><span class="line">Queue queue = session.createQueue(<span class="string">"test-queue"</span>);</span><br><span class="line"><span class="comment">//6.由会话，创建消息消费者</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(queue);</span><br><span class="line"><span class="comment">//7.监听消息</span></span><br><span class="line">consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage)message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"监听到的消息"</span>+textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//8.持续监听</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//9.释放资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2发布-订阅Demo"><a href="#3-2发布-订阅Demo" class="headerlink" title="3.2发布/订阅Demo"></a>3.2发布/订阅Demo</h3><h4 id="3-2-1添加依赖"><a href="#3-2-1添加依赖" class="headerlink" title="3.2.1添加依赖"></a>3.2.1添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.13.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-2生产者代码"><a href="#3-2-2生产者代码" class="headerlink" title="3.2.2生产者代码"></a>3.2.2生产者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.创建连接工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://120.76.56.183:61616"</span>);</span><br><span class="line"><span class="comment">//2.获取连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.开启连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.创建topic</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"><span class="comment">//6.创建消息生产者</span></span><br><span class="line">MessageProducer producer = session.createProducer(topic);</span><br><span class="line"><span class="comment">//7.创建消息 由session去创建消息</span></span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"啊啊啊啊，你可以简单点么"</span>);</span><br><span class="line"><span class="comment">//8.发送消息</span></span><br><span class="line">producer.send(message);</span><br><span class="line"><span class="comment">//9.释放资源</span></span><br><span class="line">producer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-3消费者代码"><a href="#3-2-3消费者代码" class="headerlink" title="3.2.3消费者代码"></a>3.2.3消费者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//1.创建工厂</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://120.76.56.183:61616"</span>);</span><br><span class="line"><span class="comment">//2.创建连接</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//3.启动连接</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//4.获取session</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>, Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//5.获取Topic</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"test-topic"</span>);</span><br><span class="line"><span class="comment">//6.获取topic消费者</span></span><br><span class="line">MessageConsumer consumer = session.createConsumer(topic);</span><br><span class="line"><span class="comment">//7.设置监听</span></span><br><span class="line">consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"topic监听到了"</span>+textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//8.持久监听</span></span><br><span class="line">System.in.read();</span><br><span class="line"><span class="comment">//9.关闭资源</span></span><br><span class="line">consumer.close();</span><br><span class="line">session.close();</span><br><span class="line">connection.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Spring整合ActiveMQ"><a href="#4-Spring整合ActiveMQ" class="headerlink" title="4.Spring整合ActiveMQ"></a>4.Spring整合ActiveMQ</h2><h3 id="4-1点对点Demo"><a href="#4-1点对点Demo" class="headerlink" title="4.1点对点Demo"></a>4.1点对点Demo</h3><h4 id="4-1-1生产者代码"><a href="#4-1-1生产者代码" class="headerlink" title="4.1.1生产者代码"></a>4.1.1生产者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JMS模板 负责发送消息 接受消息</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//消息的目的地</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Destination queueTextDestination;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成者发生信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextMessage</span><span class="params">(<span class="keyword">final</span> String text)</span> </span>&#123;</span><br><span class="line">jmsTemplate.send(queueTextDestination, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> session.createTextMessage(text);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-2配置文件"><a href="#4-1-2配置文件" class="headerlink" title="4.1.2配置文件"></a>4.1.2配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yuanxiong.producer"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://120.76.56.183:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>      </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span> </span><br><span class="line"><span class="comment">&lt;!-- 消息队列的值 --&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"queue_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  文本信息 </span></span><br><span class="line"><span class="comment">&lt;bean id="topicTextDestination" class="org.apache.activemq.command.ActiveMQTopic"&gt;  </span></span><br><span class="line"><span class="comment">    &lt;constructor-arg value="topic_text"/&gt;  </span></span><br><span class="line"><span class="comment">&lt;/bean&gt;  </span></span><br><span class="line"><span class="comment">--&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-1-3消费者代码"><a href="#4-1-3消费者代码" class="headerlink" title="4.1.3消费者代码"></a>4.1.3消费者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuanxiong.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage) message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"queue监听到了"</span>+textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-1-4配置文件"><a href="#4-1-4配置文件" class="headerlink" title="4.1.4配置文件"></a>4.1.4配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://120.76.56.183:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--这个是队列目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"queueTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQQueue"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"queue_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 我的监听类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yuanxiong.consumer"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"queueTextDestination"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 我的监听类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2发布订阅Demo"><a href="#4-2发布订阅Demo" class="headerlink" title="4.2发布订阅Demo"></a>4.2发布订阅Demo</h3><h4 id="4-2-1生产者代码"><a href="#4-2-1生产者代码" class="headerlink" title="4.2.1生产者代码"></a>4.2.1生产者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuanxiong.producer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.Destination;</span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.JmsTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jms.core.MessageCreator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TopicProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Destination topicTextDestination;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendTextMessage</span><span class="params">(<span class="keyword">final</span> String string)</span> </span>&#123;</span><br><span class="line">jmsTemplate.send(topicTextDestination, <span class="keyword">new</span> MessageCreator() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Message <span class="title">createMessage</span><span class="params">(Session session)</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> session.createTextMessage(string);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2配置文件"><a href="#4-2-2配置文件" class="headerlink" title="4.2.2配置文件"></a>4.2.2配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.yuanxiong.producer"</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://120.76.56.183:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jmsTemplate"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.core.JmsTemplate"</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 这个connectionFactory对应的是我们定义的Spring提供的那个ConnectionFactory对象 --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>        </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--这个是订阅模式  文本信息 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-3消费者代码"><a href="#4-2-3消费者代码" class="headerlink" title="4.2.3消费者代码"></a>4.2.3消费者代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yuanxiong.consumer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.JMSException;</span><br><span class="line"><span class="keyword">import</span> javax.jms.Message;</span><br><span class="line"><span class="keyword">import</span> javax.jms.MessageListener;</span><br><span class="line"><span class="keyword">import</span> javax.jms.TextMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">myTopicMessageListener</span> <span class="keyword">implements</span> <span class="title">MessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">TextMessage textMessage = (TextMessage)message;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"topic"</span>+textMessage.getText());</span><br><span class="line">&#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.4配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span> <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:amq</span>=<span class="string">"http://activemq.apache.org/schema/core"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:jms</span>=<span class="string">"http://www.springframework.org/schema/jms"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 真正可以产生Connection的ConnectionFactory，由对应的 JMS服务厂商提供--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.ActiveMQConnectionFactory"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"brokerURL"</span> <span class="attr">value</span>=<span class="string">"tcp://120.76.56.183:61616"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- Spring用于管理真正的ConnectionFactory的ConnectionFactory --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"connectionFactory"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.connection.SingleConnectionFactory"</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 目标ConnectionFactory对应真实的可以产生JMS Connection的ConnectionFactory --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetConnectionFactory"</span> <span class="attr">ref</span>=<span class="string">"targetConnectionFactory"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!--这个是topic目的地，点对点的  文本信息--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"topicTextDestination"</span> <span class="attr">class</span>=<span class="string">"org.apache.activemq.command.ActiveMQTopic"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"topic_text"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 消息监听容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.jms.listener.DefaultMessageListenerContainer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"connectionFactory"</span> <span class="attr">ref</span>=<span class="string">"connectionFactory"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"destination"</span> <span class="attr">ref</span>=<span class="string">"topicTextDestination"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageListener"</span> <span class="attr">ref</span>=<span class="string">"myTopicMessageListener"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;消息中间件&quot;&gt;&lt;a href=&quot;#消息中间件&quot; class=&quot;headerlink&quot; title=&quot;消息中间件&quot;&gt;&lt;/a&gt;消息中间件&lt;/h1&gt;&lt;p&gt;当没有采用消息中间件的系统模块图,当运营商后台去调用搜索服务和页面生成服务的时候，不需要知道他们返回的结果，所以在这
      
    
    </summary>
    
      <category term="MQ" scheme="http://yoursite.com/categories/MQ/"/>
    
    
      <category term="消息中间件" scheme="http://yoursite.com/tags/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
</feed>
